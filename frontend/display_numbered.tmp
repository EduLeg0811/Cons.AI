0,4
// display.js - Centralized result rendering functionality (modularized)
0,4

0,4
// __________________________________________________________________________________________
0,4
// DOMPurify
0,4
// __________________________________________________________________________________________
0,4
// Import or reference DOMPurify for XSS protection (assumed loaded globally)
0,4
const sanitizeHtml = window.DOMPurify?.sanitize || (html => html);
0,4

0,4
// Markdown renderer (usa marked + DOMPurify se disponíveis; senão, fallback simples)
0,4
function renderMarkdown(mdText) {
0,4
    const input = typeof mdText === 'string' ? mdText : String(mdText || '');
0,4
  
0,4
    // 0) Se já há HTML de bloco, apenas sanitize e devolve (evita <p><p>...</p></p>)
0,4
    const hasBlockHtml = /<\s*(p|div|ul|ol|li|h[1-6]|pre|blockquote|br)\b/i.test(input);
0,4
    try {
0,4
      if (!hasBlockHtml && window.marked?.parse) {
0,4
        const html = window.marked.parse(input);
0,4
        return sanitizeHtml(html);
0,4
      }
0,4
    } catch (e) {
0,4
      console.warn('marked falhou, usando fallback:', e);
0,4
    }
0,4
    if (hasBlockHtml) {
0,4
      // Ainda assim, tira <br> duplos e <p> vazios que porventura cheguem prontos
0,4
      return sanitizeHtml(
0,4
        input
0,4
          .replace(/(<br\s*\/?>\s*){2,}/gi, '<br>')
0,4
          .replace(/<p>\s*(?:<br\s*\/?>\s*)*<\/p>/gi, '')
0,4
      );
0,4
    }
0,4
  
0,4
    // 1) Normalização de linhas
0,4
    let normalized = input
0,4
      .replace(/\r\n?/g, '\n')     // CRLF/LF -> LF
0,4
      .replace(/[ \t]+\n/g, '\n')  // tira espaços ao fim da linha
0,4
      .replace(/\n{3,}/g, '\n\n')  // colapsa 3+ quebras em 2
0,4
      .trim();
0,4
  
0,4
    // 2) Preserva blocos de código antes de mexer em quebras
0,4
    normalized = normalized.replace(/```([\s\S]*?)```/g, (_, code) =>
0,4
      `<pre><code>${sanitizeHtml(code)}</code></pre>`
0,4
    );
0,4
  
0,4
    // 3) Marcações simples (headers, ênfases, listas mínimas)
0,4
    let tmp = normalized
0,4
      .replace(/^######\s?(.*)$/gm, '<h6>$1</h6>')
0,4
      .replace(/^#####\s?(.*)$/gm, '<h5>$1</h5>')
0,4
      .replace(/^####\s?(.*)$/gm, '<h4>$1</h4>')
0,4
      .replace(/^###\s?(.*)$/gm, '<h3>$1</h3>')
0,4
      .replace(/^##\s?(.*)$/gm, '<h2>$1</h2>')
0,4
      .replace(/^#\s?(.*)$/gm, '<h1>$1</h1>')
0,4
      .replace(/^\s*-\s+(.*)$/gm, '<li>$1</li>')
0,4
      .replace(/^\s*\*\s+(.*)$/gm, '<li>$1</li>')
0,4
      .replace(/^\s*\d+\.\s+(.*)$/gm, '<li>$1</li>')
0,4
      .replace(/(?:\s*<li>.*<\/li>\s*)+/gs, m => `<ul>${m}</ul>`)
0,4
      .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
0,4
      .replace(/\*(.+?)\*/g, '<em>$1</em>');
0,4
  
0,4
    // 4) Quebra em parágrafos (2+ \n). Filtra vazios.
0,4
    const paragraphs = tmp.split(/\n{2,}/).filter(p => p.trim().length);
0,4
  
0,4
    const html = paragraphs.map(p => {
0,4
      // dentro do parágrafo, 1 quebra -> <br> (e evita <br><br>)
0,4
      const withBreaks = p.replace(/\n/g, '<br>').replace(/(<br\s*\/?>\s*){2,}/gi, '<br>');
0,4
      return `<p>${sanitizeHtml(withBreaks)}</p>`;
0,4
    }).join('');
0,4
  
0,4
    // 5) Limpeza final: remove <p> vazios e <br> duplicados entre blocos
0,4
    const cleaned = html
0,4
      .replace(/<p>\s*(?:<br\s*\/?>\s*)*<\/p>/gi, '')
0,4
      .replace(/(<br\s*\/?>\s*){2,}/gi, '<br>');
0,4
  
0,4
    return sanitizeHtml(cleaned);
0,4
  }
0,4

0,4

0,4

0,4

0,4

0,4
// ===== Handlers mapping =====
0,4
const renderers = {
0,4
    ragbot: showRagbot,
0,4
    lexical: showSearch,
0,4
    semantical: showSearch,
0,4
    title: showTitle,
0,4
    simple: showSimple,
0,4
    verbetopedia: showVerbetopedia,
0,4
    ccg: showCcg,
0,4
};
0,4

0,4
// Helper: decide if reference badges should be shown (default: true)
0,4
function shouldShowRefBadges() {
0,4
  try {
0,4
    if (typeof window !== 'undefined' && typeof window.SHOW_REF_BADGES === 'boolean') {
0,4
      return !!window.SHOW_REF_BADGES;
0,4
    }
0,4
  } catch (e) {}
0,4
  return true; // fallback default
0,4
}
0,4

0,4

0,4

0,4
// Helper: build inline reference line like: [ Name: value; Name2: value2 ]
0,4
function buildMetaInlineLine(pairs) {
0,4
  try {
0,4
    const parts = (pairs || [])
0,4
      .filter(arr => Array.isArray(arr) && arr.length >= 2 && String(arr[1]).trim() !== '')
0,4
      .map(([k, v]) => {
0,4
        const key = String(k);
0,4
        const val = escapeHtml(String(v));
0,4
        //Se for o badge de title, coloca em negrito; se for o badge de score, coloca em italico; se for o badge de area, coloca em italico entre parênteses; se for o badge de number, coloca um caracter "#" antes do valor
0,4
        if (/^title$/i.test(key)) return `<strong>${val}</strong>`;
0,4
        if (/^score$/i.test(key)) return `<em>${val}</em>`;
0,4
        if (/^area$/i.test(key)) return `<em>(${val})</em>`;
0,4
        if (/^number$/i.test(key)) return `#${val}`;
0,4
        return `${escapeHtml(key)}: ${val}`;
0,4
      });
0,4
    if (!parts.length) return '';
0,4
    const content = `[ ${parts.join('; ')} ]`;
0,4
    return `<div class="meta-inline" style="font-size: 80%; color: var(--gray-600); margin-top: 4px;">${content}</div>`;
0,4
  } catch (e) {
0,4
    return '';
0,4
  }
0,4
}
0,4

0,4
/**
0,4
 * Displays results based on search type
0,4
 * @param {HTMLElement} container - The container element
0,4
 * @param {Object} data - The data payload
0,4
 * @param {string} type - The search type key
0,4
 */
0,4
function displayResults(container, data, type) {
0,4
  if (!container) {
0,4
      console.error('Results container not found');
0,4
      return;
0,4
  }
0,4
  const renderer = renderers[type];
0,4
  if (!renderer) {
0,4
      console.error(`Unknown search type: ${type}`);
0,4
      return;
0,4
  }
0,4
  renderer(container, data);
0,4
}
0,4

0,4
// ===== Utility functions =====
0,4
function escapeHtml(text) {
0,4
    if (typeof text !== 'string') return text;
0,4
    return text
0,4
        .replace(/&/g, '&amp;')
0,4
        .replace(/</g, '&lt;')
0,4
        .replace(/>/g, '&gt;')
0,4
        .replace(/"/g, '&quot;')
0,4
        .replace(/'/g, '&#039;');
0,4
}
0,4

0,4

0,4

0,4

0,4

0,4
//______________________________________________________________________________________________
0,4
// insertLoading
0,4
//______________________________________________________________________________________________
0,4
function insertLoading(container, message) {
0,4
    container.insertAdjacentHTML('beforeend', `
0,4
    <div class="loading-container">
0,4
        <div class="loading">${message}</div>
0,4
    </div>`);
0,4
}
0,4

0,4
function removeLoading(container) {
0,4
    const loadingContainer = container.querySelector('.loading-container .loading');
0,4
    if (loadingContainer) {
0,4
        loadingContainer.closest('.loading-container').remove();
0,4
    }
0,4
}
0,4

0,4

0,4

0,4

0,4

0,4
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
0,4

0,4

0,4

0,4

0,4
//______________________________________________________________________________________________
0,4
// showSearch
0,4
//______________________________________________________________________________________________
0,4
function showSearch(container, data) {
0,4

0,4
    if (!container) {
0,4
        console.error('Results container not found');
0,4
        return;
0,4
    }
0,4

0,4
    // 0) Garantir array de entrada
0,4
    const arr = Array.isArray(data.results) ? data.results : [];
0,4
    if (!arr.length) {
0,4
        container.insertAdjacentHTML(
0,4
            'beforeend',
0,4
            '<div class="displaybox-container"><div class="displaybox-content">No results to display.</div></div>'
0,4
        );
0,4
        return;
0,4
    }
0,4

0,4
    // 1) Normalizador de fonte/livro para exibição (remove diretórios e .md)
0,4
    const normSourceName = (typeof window !== 'undefined' && typeof window.normSourceName === 'function')
0,4
        ? window.normSourceName
0,4
        : function _fallbackNormSourceName(src) {
0,4
            if (!src) return 'Results';
0,4
            let s = String(src);
0,4
            s = s.split(/[\\/]/).pop();           // tira diretórios
0,4
            s = s.replace(/\.(md|markdown)$/i, ''); // tira extensão
0,4
            return s;
0,4
        };
0,4

0,4
   // 2) Agrupar por fonte normalizada
0,4
        const groups = arr.reduce((acc, it, idx) => {
0,4
            const raw = it?.book || it?.source || it?.file || 'Results';
0,4
            const key = normSourceName(raw);
0,4
            if (!acc[key]) acc[key] = [];
0,4
            acc[key].push({ ...it, _origIndex: idx, _srcRaw: raw, _src: key });
0,4
            return acc;
0,4
        }, {});
0,4
        const groupNames = Object.keys(groups);
0,4

0,4

0,4
    // 3) Summary badges (rows) and rendering
0,4
    // ===========================================================================================
0,4

0,4
    const totalCount = arr.length;
0,4
    const slug = (s) => String(s || 'all')
0,4
        .toLowerCase()
0,4
        .replace(/[^a-z0-9]+/g, '-')
0,4
        .replace(/(^-|-$)/g, '');
0,4

0,4
    // Get the checkbox state
0,4
    const flag_grouping = document.getElementById('groupResults')?.checked ?? true;
0,4

0,4
    // Build summary rows according to grouping toggle
0,4
    let summaryRows = '<div class="summary-list">';
0,4
    if (flag_grouping) {
0,4
        // Only per-source rows
0,4
        summaryRows += groupNames.map(name => {
0,4
            const n = groups[name].length;
0,4
            const target = `group-${slug(name)}`;
0,4
            return `<button class="pill pill-row" data-target="${target}"><span class="pill-label">${escapeHtml(name)}</span><span class="count">${n}</span></button>`;
0,4
        }).join('');
0,4
    } else {
0,4
        // Only total row
0,4
        summaryRows += `<button class="pill pill-row" data-target="all-results"><span class="pill-label">Total</span><span class="count">${totalCount}</span></button>`;
0,4
    }
0,4
    summaryRows += '</div>';
0,4
    container.insertAdjacentHTML('beforeend', summaryRows);
0,4

0,4
    // Processamento GERAL
0,4
    // ===========================================================================================
0,4

0,4
    if (flag_grouping) {
0,4

0,4
            
0,4
        // 4) Render por GRUPOS (cada source name)
0,4
        // ===========================================================================================
0,4
        groupNames.forEach(groupName => {
0,4

0,4
            const groupItems = groups[groupName];
0,4
            let groupHtml = '';
0,4

0,4
            // Processa cada item agrupado
0,4
            groupItems.forEach((item, idx) => {
0,4
                
0,4
                const markerHtml = `<span class="paragraph-marker" style="font-size: 10px; color: gray; font-weight: bold; display: inline-block; margin-right: 4px;">[${idx + 1}]</span>`;
0,4
                const sourceName = item.source || item.file || item.book || 'Unknown';
0,4

0,4
                let itemHtml = '';
0,4
                itemHtml = format_paragraphs_source (item, sourceName);
0,4

0,4
                groupHtml += itemHtml;
0,4
            });
0,4

0,4

0,4
            // 5) HTML final do grupo
0,4
            // =======================================
0,4
            const panelId = 'group-' + slug(groupName);
0,4
            const groupPanel = `
0,4
                <div id="${panelId}" class="collapse-panel">
0,4
                    <div class="displaybox-container">
0,4
                        <div class="displaybox-content group-content">
0,4
                            ${groupHtml}
0,4
                        </div>
0,4
                    </div>
0,4
                </div>
0,4
            `;
0,4
            container.insertAdjacentHTML('beforeend', groupPanel);
0,4

0,4
        });
0,4

0,4

0,4

0,4
    } else {
0,4

0,4
        // Reunir os itens de todas as fontes em lista única
0,4
        // ===========================================================================================
0,4
        const sortedItems = [...arr].sort((b, a) => (b.score || 0) - (a.score || 0));
0,4

0,4
        console.log('sortedItems', sortedItems);
0,4

0,4
        let groupHtml = '';
0,4

0,4
        // Renderizar os itens ordenados
0,4
        // ===========================================================================================
0,4
        sortedItems.forEach((item, idx) => {
0,4

0,4
            const markerHtml = `<span class="paragraph-marker" style="font-size: 10px; color: gray; font-weight: bold; display: inline-block; margin-right: 4px;">[${idx + 1}]</span>`;
0,4
            const sourceName = item.source || item.file || item.book || 'Unknown';
0,4
        
0,4

0,4
            let itemHtml = '';
0,4
            itemHtml = format_paragraphs_source (item, sourceName);
0,4

0,4
            groupHtml += itemHtml;
0,4
        });
0,4

0,4
       
0,4
         // 5) HTML final do grupo
0,4
        // =======================================
0,4
        const groupPanel = `
0,4
            <div id="all-results" class="collapse-panel">
0,4
                <div class="displaybox-container">
0,4
                    <div class="displaybox-content group-content">
0,4
                        ${groupHtml}
0,4
                    </div>
0,4
                </div>
0,4
            </div>
0,4
        `;
0,4
        container.insertAdjacentHTML('beforeend', groupPanel);
0,4

0,4
    };
0,4

0,4
    // Attach toggle behavior for summary pills (event delegation inside container)
0,4
    // Bind click handler once per container to avoid double toggles after new queries
0,4
    if (!container.__pillHandlerBound) {
0,4
        container.addEventListener('click', function(ev) {
0,4
            const btn = ev.target.closest('.pill');
0,4
            if (!btn) return;
0,4
            ev.preventDefault();
0,4
            const targetId = btn.getAttribute('data-target');
0,4
            if (!targetId) return;
0,4
            const safeId = `#${targetId.replace(/[^a-z0-9\-_:]/gi, '')}`;
0,4
            const panel = container.querySelector(safeId) || container.querySelector(`#${targetId}`);
0,4
            if (!panel) return;
0,4
            panel.classList.toggle('open');
0,4
            if (panel.classList.contains('open')) {
0,4
                try { panel.scrollIntoView({ behavior: 'smooth', block: 'start' }); } catch(e) {}
0,4
            }
0,4
        });
0,4
        // mark bound
0,4
        container.__pillHandlerBound = true;
0,4
    }
0,4

0,4
}
0,4

0,4

0,4

0,4

0,4

0,4

0,4
// ===========================================================================
0,4
// format_paragraphs_source
0,4
// ===========================================================================
0,4
const format_paragraphs_source = (item, sourceName) => {
0,4

0,4
    let itemHtml = '';
0,4
    
0,4
    if (sourceName === 'LO') {
0,4
        itemHtml = format_paragraph_LO(item);
0,4
    }
0,4
    else if (sourceName === 'DAC') {
0,4
        itemHtml = format_paragraph_DAC(item);
0,4
    }
0,4
    else if (sourceName === 'CCG') {
0,4
        itemHtml = format_paragraph_CCG(item);
0,4
    }
0,4
    else if (sourceName === 'EC' || sourceName === 'ECALL_DEF' || sourceName === 'ECWV' || sourceName === 'ECALL') {
0,4
        itemHtml = format_paragraph_EC(item);
0,4
    }
0,4
    else {
0,4
        itemHtml = format_paragraph_Default(item);
0,4
    }
0,4
    return itemHtml;    
0,4
};
0,4

0,4

0,4

0,4

0,4

0,4
// ===========================================================================
0,4
// LO: Content_Text  Markdown_Text Title  Number  Score
0,4
// ===========================================================================
0,4
const format_paragraph_LO = (item) => {
0,4

0,4
    console.log('Available properties:', Object.keys(item));
0,4
    if (item.metadata) {
0,4
        console.log('Metadata properties:', Object.keys(item.metadata));
0,4
    }
0,4

0,4
    // Fields are directly on the item
0,4
    const title = item.title || '';
0,4
    const paragraph_number = item.number || '';
0,4
    const score = item.score || 0.00;
0,4
    const text = item.markdown || item.content_text || '';
0,4
    const source = item.source || '';
0,4

0,4
    console.log('---------------[display.js] [format_paragraph_LO] paragraph_number: ', paragraph_number);
0,4
    console.log('---------------[display.js] [format_paragraph_LO] title: ', title);
0,4
    console.log('---------------[display.js] [format_paragraph_LO] score: ', score);
0,4
    console.log('---------------[display.js] [format_paragraph_LO] source: ', source);
0,4

0,4
    // Add each field to the array only if it has a value
0,4
    const badgeParts = [];
0,4
    if (source) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo1"><strong>${escapeHtml(source)}</strong></span>`);
0,4
    }
0,4
    if (title) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo2"> <strong>${escapeHtml(title)}</strong></span>`);
0,4
    }
0,4
    if (paragraph_number) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo3"> #${escapeHtml(paragraph_number)}</span>`);
0,4
    }
0,4
    if (score > 0.0) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo4"> @${escapeHtml(score)}</span>`);
0,4
    }
0,4

0,4
    // Join the non-empty badges with a space
0,4
    metaBadges = badgeParts.join('');
0,4

0,4
    // Add title to text if score > 0.0 (Semantical Search)
0,4
    const textCompleted = (score > 0.0) ? `**${title}**. ${text}` : text;
0,4

0,4
    // Renderiza markdown
0,4
    const rawHtml = renderMarkdown(textCompleted);
0,4
    const safeHtml = (window.DOMPurify ? DOMPurify.sanitize(rawHtml) : rawHtml);
0,4

0,4
    // Decide badges vs inline meta line
0,4
    const showBadges = shouldShowRefBadges();
0,4
    const metaInline = buildMetaInlineLine([
0,4
        ['Source', source],
0,4
        ['Title', title],
0,4
        ['Number', paragraph_number],
0,4
        ...(score > 0.0 ? [['Score', score]] : []),
0,4
    ]);
0,4

0,4
    const finalHtml = showBadges
0,4
      ? `
0,4
        <div class="displaybox-item">
0,4
            <div class="displaybox-text markdown-content">${safeHtml}</div>
0,4
            ${metaBadges}
0,4
        </div>`
0,4
      : `
0,4
        <div class="displaybox-item">
0,4
            <div class="displaybox-text markdown-content">${safeHtml}${metaInline}</div>
0,4
        </div>`;
0,4

0,4
    return finalHtml;
0,4
}
0,4

0,4
  
0,4

0,4

0,4
// ===========================================================================
0,4
// DAC: Content_Text  Markdown  Title  Number  Source  Argumento  Section
0,4
// ===========================================================================
0,4
const format_paragraph_DAC = (item) => {
0,4
    
0,4

0,4
    console.log('Available properties:', Object.keys(item));
0,4
    if (item.metadata) {
0,4
        console.log('Metadata properties:', Object.keys(item.metadata));
0,4
    }
0,4

0,4
    // Fields are directly on the item
0,4
    const title = item.title || '';
0,4
    const paragraph_number = item.number || '';
0,4
    const score = item.score || 0.00;
0,4
    const text = item.markdown || item.content_text || '';
0,4
    const argumento = item.argumento || '';
0,4
    const section = item.section || '';
0,4
    const source = item.source || '';
0,4

0,4
    console.log('---------------[display.js] [format_paragraph_DAC] paragraph_number: ', paragraph_number);
0,4
    console.log('---------------[display.js] [format_paragraph_DAC] title: ', title);
0,4
    console.log('---------------[display.js] [format_paragraph_DAC] score: ', score);
0,4
    console.log('---------------[display.js] [format_paragraph_DAC] argumento: ', argumento);
0,4
    console.log('---------------[display.js] [format_paragraph_DAC] section: ', section);
0,4
    console.log('---------------[display.js] [format_paragraph_DAC] source: ', source);
0,4

0,4
    // Add each field to the array only if it has a value
0,4
    const badgeParts = [];      
0,4
    if (source) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo1"> <strong>${escapeHtml(source)}</strong></span>`);
0,4
    }
0,4
    if (title) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo2"> <strong>${escapeHtml(title)}</strong></span>`);
0,4
    }
0,4
    if (argumento) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo5"> ${escapeHtml(argumento)}</span>`);
0,4
    }
0,4
    if (section) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo6"> <em> ${escapeHtml(section)}</em></span>`);
0,4
    }
0,4
    if (paragraph_number) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo4"> #${escapeHtml(paragraph_number)}</span>`);
0,4
    }
0,4
    if (score > 0.0) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo9"> @${escapeHtml(score)}</span>`);
0,4
    }
0,4

0,4
    // Join the non-empty badges with a space
0,4
    metaBadges = badgeParts.join('');
0,4

0,4
    // Renderiza markdown
0,4
    const rawHtml = renderMarkdown(text);
0,4
    const safeHtml = (window.DOMPurify ? DOMPurify.sanitize(rawHtml) : rawHtml);
0,4

0,4
    // Decide badges vs inline meta line
0,4
    const showBadges = shouldShowRefBadges();
0,4
    const metaInline = buildMetaInlineLine([
0,4
        ['Source', source],
0,4
        ['Title', title],
0,4
        ['Argument', argumento],
0,4
        ['Section', section],
0,4
        ['Number', paragraph_number],
0,4
        ...(score > 0.0 ? [['Score', score]] : []),
0,4
    ]);
0,4

0,4
    const finalHtml = showBadges
0,4
      ? `
0,4
        <div class="displaybox-item">
0,4
            <div class="displaybox-text markdown-content">${safeHtml}</div>
0,4
            ${metaBadges}
0,4
        </div>`
0,4
      : `
0,4
        <div class="displaybox-item">
0,4
            <div class="displaybox-text markdown-content">${safeHtml}${metaInline}</div>
0,4
        </div>`;
0,4

0,4
    return finalHtml;
0,4
}
0,4
    
0,4
    
0,4
  
0,4
// ===========================================================================
0,4
// CCG: Content_Text  Markdown_Text  Title  Number  Source  Folha
0,4
// ===========================================================================
0,4
const format_paragraph_CCG = (item) => {
0,4
    
0,4

0,4
    console.log('Available properties:', Object.keys(item));
0,4
    if (item.metadata) {
0,4
        console.log('Metadata properties:', Object.keys(item.metadata));
0,4
    }
0,4

0,4
    // Fields are directly on the item
0,4
    const title = item.title || '';
0,4
    const question_number = item.number || '';
0,4
    const score = item.score || 0.00;
0,4
    const text = item.markdown || item.content_text || '';
0,4
    const folha = item.folha || '';
0,4
    const source = item.source || '';
0,4

0,4
    console.log('---------------[display.js] [format_paragraph_CCG] question_number: ', question_number);
0,4
    console.log('---------------[display.js] [format_paragraph_CCG] title: ', title);
0,4
    console.log('---------------[display.js] [format_paragraph_CCG] score: ', score);
0,4
    console.log('---------------[display.js] [format_paragraph_CCG] folha: ', folha);
0,4
    console.log('---------------[display.js] [format_paragraph_CCG] source: ', source);
0,4

0,4

0,4
    // Add each field to the array only if it has a value
0,4
    const badgeParts = [];   
0,4
    if (source) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo1"> <strong>${escapeHtml(source)}</strong></span>`);
0,4
    }
0,4
    if (title) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo2"> <strong>${escapeHtml(title)}</strong></span>`);
0,4
    }
0,4
    if (folha) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo4"> (${escapeHtml(folha)})</span>`);
0,4
    }
0,4
    if (question_number) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo3"> #${escapeHtml(question_number)}</span>`);
0,4
    }
0,4
    if (score > 0.0) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo9"> @${escapeHtml(score)}</span>`);
0,4
    }
0,4

0,4
    // Join the non-empty badges with a space
0,4
    metaBadges = badgeParts.join('');
0,4
    
0,4
    // Renderiza markdown
0,4
    const rawHtml = renderMarkdown(text);
0,4
    const safeHtml = (window.DOMPurify ? DOMPurify.sanitize(rawHtml) : rawHtml);
0,4

0,4
    // Decide badges vs inline meta line
0,4
    const showBadges = shouldShowRefBadges();
0,4
    const metaInline = buildMetaInlineLine([
0,4
        ['Source', source],
0,4
        ['Title', title],
0,4
        ['Folha', folha],
0,4
        ['Number', question_number],
0,4
        ...(score > 0.0 ? [['Score', score]] : []),
0,4
    ]);
0,4

0,4
    const finalHtml = showBadges
0,4
      ? `
0,4
        <div class="displaybox-item">
0,4
            <div class="displaybox-text markdown-content">${safeHtml}</div>
0,4
            ${metaBadges}
0,4
        </div>`
0,4
      : `
0,4
        <div class="displaybox-item">
0,4
            <div class="displaybox-text markdown-content">${safeHtml}${metaInline}</div>
0,4
        </div>`;
0,4

0,4
    return finalHtml;
0,4
}
0,4

0,4
  
0,4
// ===========================================================================
0,4
// EC: Content_Text  Markdown_Text  Title  Number  Source  Area  Theme  Author  Sigla  Date  Link
0,4
// ===========================================================================
0,4
const format_paragraph_EC = (item) => {
0,4
    
0,4

0,4
    console.log('Available properties:', Object.keys(item));
0,4
    if (item.metadata) {
0,4
        console.log('Metadata properties:', Object.keys(item.metadata));
0,4
    }
0,4

0,4
    // Fields are directly on the item
0,4
    const title = item.title || '';
0,4
    const verbete_number = item.number || '';
0,4
    const score = item.score || 0.00;
0,4
    const text = item.markdown || item.content.text || '';
0,4
    const area = item.area || '';
0,4
    const theme = item.theme || '';
0,4
    const author = item.author || '';
0,4
    const sigla = item.sigla || '';
0,4
    const date = item.date || '';
0,4
    const link = item.link || '';
0,4
    const source = 'EC';
0,4

0,4

0,4
    console.log('---------------[display.js] [format_paragraph_EC] verbete_number: ', verbete_number);
0,4
    console.log('---------------[display.js] [format_paragraph_EC] title: ', title);
0,4
    console.log('---------------[display.js] [format_paragraph_EC] score: ', score);
0,4
    console.log('---------------[display.js] [format_paragraph_EC] area: ', area);
0,4
    console.log('---------------[display.js] [format_paragraph_EC] theme: ', theme);
0,4
    console.log('---------------[display.js] [format_paragraph_EC] author: ', author);
0,4
    console.log('---------------[display.js] [format_paragraph_EC] sigla: ', sigla);
0,4
    console.log('---------------[display.js] [format_paragraph_EC] date: ', date);
0,4
    console.log('---------------[display.js] [format_paragraph_EC] link: ', link);
0,4
    console.log('---------------[display.js] [format_paragraph_EC] source: ', source);
0,4

0,4
    // Add each field to the array only if it has a value
0,4
    const badgeParts = [];   
0,4
    if (source) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo1"> <strong>${escapeHtml(source)}</strong></span>`);
0,4
    }
0,4
    if (title) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo2"> <strong>${escapeHtml(title)}</strong></span> `);
0,4
    }
0,4
    if (area) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo4"> <em> ${escapeHtml(area)}</em></span>`);
0,4
    }
0,4
    if (verbete_number) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo3"> #${escapeHtml(verbete_number)}</span>`);
0,4
    }
0,4
    if (theme) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo5"> ${escapeHtml(theme)}</span>`);
0,4
    }
0,4
    if (author) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo6"> ${escapeHtml(author)}</span>`);
0,4
    }
0,4
    if (date) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo7"> ${escapeHtml(date)}</span>`);
0,4
    }
0,4
    if (score > 0.0) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo9"> @${escapeHtml(score)}</span>`);
0,4
    }
0,4

0,4
    // Join the non-empty badges with a space
0,4
    metaBadges = badgeParts.join('');
0,4
      
0,4
    // Renderiza markdown
0,4
    const rawHtml = renderMarkdown(text);
0,4
    const safeHtml = (window.DOMPurify ? DOMPurify.sanitize(rawHtml) : rawHtml);
0,4

0,4
    // Decide badges vs inline meta line
0,4
    const showBadges = shouldShowRefBadges();
0,4
    const metaInline = buildMetaInlineLine([
0,4
        ['Source', source],
0,4
        ['Title', title],
0,4
        ['Area', area],
0,4
        ['Number', verbete_number],
0,4
        ['Theme', theme],
0,4
        ['Author', author],
0,4
        ['Date', date],
0,4
        ...(score > 0.0 ? [['Score', score]] : []),
0,4
    ]);
0,4

0,4
    const finalHtml = showBadges
0,4
      ? `
0,4
        <div class="displaybox-item">
0,4
            <div class="displaybox-text markdown-content">${safeHtml}</div>
0,4
            ${metaBadges}
0,4
        </div>`
0,4
      : `
0,4
        <div class="displaybox-item">
0,4
            <div class="displaybox-text markdown-content">${safeHtml}${metaInline}</div>
0,4
        </div>`;
0,4

0,4
    return finalHtml;
0,4
}
0,4

0,4
  
0,4

0,4

0,4

0,4

0,4

0,4

0,4

0,4

0,4

0,4

0,4
// ===========================================================================
0,4
// Default: Content_Text  Markdown_Text Title  Number  Score
0,4
// ===========================================================================
0,4
const format_paragraph_Default = (item) => {
0,4

0,4
    console.log('Available properties:', Object.keys(item));
0,4
    if (item.metadata) {
0,4
        console.log('Metadata properties:', Object.keys(item.metadata));
0,4
    }
0,4

0,4
    // Fields are directly on the item
0,4
    const title = item.title || '';
0,4
    const paragraph_number = item.number || '';
0,4
    const score = item.score || 0.00;
0,4
    const text = item.markdown || item.content_text || '';
0,4
    const source = item.source || '';
0,4

0,4
    console.log('---------------[display.js] [format_paragraph_Default] paragraph_number: ', paragraph_number);
0,4
    console.log('---------------[display.js] [format_paragraph_Default] title: ', title);
0,4
    console.log('---------------[display.js] [format_paragraph_Default] score: ', score);
0,4
    console.log('---------------[display.js] [format_paragraph_Default] source: ', source);
0,4

0,4
    // Add each field to the array only if it has a value
0,4
    const badgeParts = [];
0,4
    if (source) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo1"><strong>${escapeHtml(source)}</strong></span>`);
0,4
    }
0,4
    // if (title) {
0,4
    //     badgeParts.push(`<span class="metadata-badge estilo2"> <strong>${escapeHtml(title)}</strong></span>`);
0,4
    // }
0,4
    if (paragraph_number) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo3"> #${escapeHtml(paragraph_number)}</span>`);
0,4
    }
0,4
    if (score > 0.0) {
0,4
        badgeParts.push(`<span class="metadata-badge estilo4"> @${escapeHtml(score)}</span>`);
0,4
    }
0,4

0,4
    // Join the non-empty badges with a space
0,4
    metaBadges = badgeParts.join('');
0,4

0,4
    // Add title to text if score > 0.0 (Semantical Search)
0,4
    const textCompleted = (score > 0.0) ? `**${title}**. ${text}` : text;
0,4

0,4
    // Renderiza markdown
0,4
    const rawHtml = renderMarkdown(textCompleted);
0,4
    const safeHtml = (window.DOMPurify ? DOMPurify.sanitize(rawHtml) : rawHtml);
0,4

0,4
    // Decide badges vs inline meta line
0,4
    const showBadges = shouldShowRefBadges();
0,4
    const metaInline = buildMetaInlineLine([
0,4
        ['Source', source],
0,4
        ['Title', title],
0,4
        ['Number', paragraph_number],
0,4
        ...(score > 0.0 ? [['Score', score]] : []),
0,4
    ]);
0,4

0,4
    const finalHtml = showBadges
0,4
      ? `
0,4
        <div class="displaybox-item">
0,4
            <div class="displaybox-text markdown-content">${safeHtml}</div>
0,4
            ${metaBadges}
0,4
        </div>`
0,4
      : `
0,4
        <div class="displaybox-item">
0,4
            <div class="displaybox-text markdown-content">${safeHtml}${metaInline}</div>
0,4
        </div>`;
0,4

0,4
    return finalHtml;
0,4
}
0,4

0,4

0,4

0,4

0,4

0,4

0,4

0,4

0,4

0,4

0,4

0,4

0,4

0,4

0,4
// ________________________________________________________________________________________
0,4
// Show RAGbot
0,4
// ________________________________________________________________________________________
0,4
 // Expected data format from /ragbot:
0,4
  // {
0,4
  //   results: [{ text: string, citations: array }],
0,4
  //   total_tokens_used: number,
0,4
  //   type: 'ragbot',
0,4
  //   model: string,
0,4
  //   temperature: number
0,4
  // }
0,4
  function showRagbot(container, data) {
0,4
    const text = data?.text || 'No text available.';
0,4
    const mdHtml = renderMarkdown(text);
0,4

0,4
    // ***********************************************************************
0,4
    // Extract metadata
0,4
    // ***********************************************************************
0,4
    // ragbot: {
0,4
    //   metadataFields: ['title', 'number', 'source', 'citations', 'total_tokens_used', 'model', 'temperature']
0,4
    // }
0,4
    // ***********************************************************************
0,4
    metadata = extractMetadata(data, 'ragbot');
0,4

0,4
    const citations = metadata?.citations;
0,4
    const total_tokens_used = metadata?.total_tokens_used;
0,4
    const model = metadata?.model;
0,4
    const temperature = metadata?.temperature;
0,4
    
0,4
    // Badge do número absoluto do parágrafo no arquivo (se presente)
0,4
    const metaInfo = `
0,4
    <div class="metadata-container">
0,4
      <span class="metadata-badge citation">Citations: ${citations}</span>
0,4
      <span class="metadata-badge model">Model: ${model}</span>
0,4
      <span class="metadata-badge temperature">Temperature: ${temperature}</span>
0,4
      <span class="metadata-badge tokens">Tokens: ${total_tokens_used}</span>
0,4
    </div>
0,4
    `;  
0,4
  
0,4
  const html = `
0,4
    <div class="displaybox-container ragbot-box">
0,4
      <div class="displaybox-content">
0,4
        <div class="displaybox-text markdown-content">${mdHtml}</div> <!-- <<< -->
0,4
        ${metaInfo}
0,4
      </div>
0,4
    </div>
0,4
  `;
0,4
  container.insertAdjacentHTML('beforeend', html);
0,4
}
0,4

0,4

0,4
// ________________________________________________________________________________________
0,4
// Show Title
0,4
// ________________________________________________________________________________________
0,4
function showTitle(container, text) {
0,4
    const cleanText = renderMarkdown(text);
0,4
    const html = `
0,4
    <div style="
0,4
        border: 1px solid var(--gray-200);
0,4
        background-color: var(--gray-100);
0,4
        padding: 10px 12px;
0,4
        border-radius: 8px;
0,4
        margin: 8px 0 14px 0;
0,4
    ">
0,4
        <div style="font-weight: bold; color: var(--gray-900);">
0,4
           ${cleanText}
0,4
        </div>
0,4
    </div>`;
0,4
  
0,4
   
0,4
    container.insertAdjacentHTML('beforeend', html);
0,4
}
0,4

0,4
// ________________________________________________________________________________________
0,4
// Show Simple
0,4
// ________________________________________________________________________________________
0,4
 // Expected data format from /simple:
0,4
  // {
0,4
  //    text: string,
0,4
  //    ref: string
0,4
  //    citations: array,
0,4
  //    total_tokens_used: number,
0,4
  //    type: 'simple',
0,4
  //    model: string,
0,4
  //    temperature: number
0,4
  // }
0,4
  function showSimple(container, data) {
0,4
    const text = data.text;
0,4
    const ref = data.ref || "";
0,4
    const mdHtml = renderMarkdown(text);
0,4

0,4
    const html = `
0,4
    <div class="displaybox-container simple">
0,4
      <div class="displaybox-content">
0,4
        <div class="displaybox-text markdown-content">
0,4
          ${mdHtml}
0,4
          <div class="simple-ref">[${ref}]</div>
0,4
        </div>
0,4
      </div>
0,4
    </div>`;
0,4

0,4
    container.insertAdjacentHTML('beforeend', html);
0,4
  }
0,4

0,4

0,4

0,4

0,4
// ________________________________________________________________________________________
0,4
// Show Verbetopedia (simplificada — ordenação por score)
0,4
// ________________________________________________________________________________________
0,4

0,4
function showVerbetopedia(container, data) {
0,4
    if (!container) {
0,4
        console.error('Results container not found');
0,4
        return;
0,4
    }
0,4

0,4
    // 0) Garantir array de entrada
0,4
    const arr = Array.isArray(data.results) ? data.results : [];
0,4
    if (!arr.length) {
0,4
        container.insertAdjacentHTML(
0,4
            'beforeend',
0,4
            '<div class="displaybox-container"><div class="displaybox-content">No results to display.</div></div>'
0,4
        );
0,4
        return;
0,4
    }
0,4

0,4
    // 1) Extrair metadados antes para usar score
0,4
    const items = arr.map(item => {
0,4
        const metaData = extractMetadata(item, 'verbetopedia');
0,4
        return { ...item, _meta: metaData };
0,4
    });
0,4

0,4
    // 2) Ordenar por score decrescente
0,4
    items.sort((a, b) => {
0,4
        const sa = (typeof a._meta.score === 'number') ? a._meta.score : -Infinity;
0,4
        const sb = (typeof b._meta.score === 'number') ? b._meta.score : -Infinity;
0,4
        return sa - sb; // menor primeiro
0,4
    });
0,4

0,4
   
0,4
    // 3) Gera HTML de cada item
0,4
    const contentHtml = items.map(item => {
0,4
        // Conteúdo principal
0,4
        let content = (
0,4
            (typeof item.markdown === 'string' && item.markdown) ||
0,4
            (typeof item.page_content === 'string' && item.page_content) ||
0,4
            (typeof item.text === 'string' && item.text) ||
0,4
            ''
0,4
        );
0,4

0,4
        const rawHtml  = renderMarkdown(content);
0,4
        const safeHtml = (window.DOMPurify ? DOMPurify.sanitize(rawHtml) : rawHtml);
0,4

0,4
        const metaData = item._meta;
0,4

0,4
        // Inclui ícone PDF após o título
0,4
        const titleHtml = `
0,4
        <strong>${metaData.title}</strong> (${metaData.area})  ●  <em>${metaData.author}</em>  ●  #${metaData.number}  ●  ${metaData.date}
0,4
    `;
0,4

0,4
        const scoreHtml = (typeof metaData.score === 'number' && !Number.isNaN(metaData.score))
0,4
            ? `<span class="rag-badge">Score: ${metaData.score.toFixed(2)}</span>` : '';
0,4

0,4

0,4
        // 3) Monta o link para download do verbete PDF
0,4
        let arquivo = metaData.title;
0,4

0,4
        // Sanitiza: remove acentos e troca ç/Ç
0,4
        arquivo = arquivo
0,4
            .normalize("NFD")                // separa acentos da letra
0,4
            .replace(/[\u0300-\u036f]/g, "") // remove diacríticos
0,4
            .replace(/ç/g, "c")              // troca ç
0,4
            .replace(/Ç/g, "C");             // troca Ç
0,4

0,4
        // Monta link final (com encoding seguro)
0,4
        const verbLink = VERBETES_URL + encodeURIComponent(arquivo) + ".pdf";
0,4

0,4
        console.log("SANITIZED verbLink = ", verbLink);
0,4

0,4
        const pdfLink = `
0,4
            <a href="${verbLink}" target="_blank" rel="noopener noreferrer"
0,4
            title="Abrir PDF em nova aba" style="margin-left: 8px; color: red; font-size: 1.1em;">
0,4
                <i class="fas fa-file-pdf"></i>
0,4
            </a>`;
0,4

0,4
           
0,4
        // 4) Monta o HTML final
0,4
        return `
0,4
        <div class="displaybox-item">
0,4
            <div class="displaybox-header verbetopedia-header" style="text-align: left; padding-left: 0;">
0,4
                <span class="header-text">${titleHtml}</span>
0,4
            </div>
0,4
            <div class="displaybox-text">
0,4
                <span class="displaybox-text markdown-content">${safeHtml}</span>
0,4
                <span class="metadata-badge">${scoreHtml}</span>
0,4
                ${pdfLink}
0,4
            </div>
0,4
        </div>
0,4
        `;
0,4
    }).join('');
0,4

0,4

0,4

0,4
    // 5) Bloco final (único grupo — EC)
0,4
    const groupHtml = `
0,4
    <div class="displaybox-group">
0,4
        <div class="displaybox-header">
0,4
            <span style="color: blue; font-size: 16px; font-weight: bold;">Enciclopédia da Conscienciologia</span>
0,4
            <span class="score-badge" style="font-size: 12px">${items.length} resultado${items.length !== 1 ? 's' : ''}</span>
0,4
        </div>
0,4
        <div class="displaybox-content">
0,4
            ${contentHtml}
0,4
        </div>
0,4
    </div>
0,4
    `;
0,4

0,4
    container.insertAdjacentHTML('beforeend', groupHtml);
0,4

0,4
    // Also render collapsible badge row + panel for Verbetopedia
0,4
    const _vb_count = items.length;
0,4
    const _vb_html = `
0,4
      <div class="summary-list">
0,4
        <button class="pill pill-row" data-target="group-ec">
0,4
          <span class="pill-label">Enciclopédia da Conscienciologia</span>
0,4
          <span class="count">${_vb_count}</span>
0,4
        </button>
0,4
      </div>
0,4
      <div id="group-ec" class="collapse-panel">
0,4
        <div class="displaybox-container">
0,4
          <div class="displaybox-content group-content">
0,4
            ${contentHtml}
0,4
          </div>
0,4
        </div>
0,4
      </div>`;
0,4
    container.insertAdjacentHTML('beforeend', _vb_html);
0,4

0,4
    if (!container.__pillHandlerBound) {
0,4
      container.addEventListener('click', function(ev) {
0,4
          const btn = ev.target.closest('.pill');
0,4
          if (!btn) return;
0,4
          ev.preventDefault();
0,4
          const targetId = btn.getAttribute('data-target');
0,4
          if (!targetId) return;
0,4
          const safeId = `#${targetId.replace(/[^a-z0-9\-_:]/gi, '')}`;
0,4
          const panel = container.querySelector(safeId) || container.querySelector(`#${targetId}`);
0,4
          if (!panel) return;
0,4
          panel.classList.toggle('open');
0,4
          if (panel.classList.contains('open')) {
0,4
              try { panel.scrollIntoView({ behavior: 'smooth', block: 'start' }); } catch(e) {}
0,4
          }
0,4
      });
0,4
      container.__pillHandlerBound = true;
0,4
    }
0,4
}
0,4

0,4

0,4

0,4

0,4

0,4
// ________________________________________________________________________________________
0,4
// Show Conscienciogramopedia (simplificada — ordenação por score)
0,4
// ________________________________________________________________________________________
0,4

0,4
function showCcg(container, data) {
0,4
    if (!container) {
0,4
        console.error('Results container not found');
0,4
        return;
0,4
    }
0,4

0,4
    // 0) Garantir array de entrada
0,4
    const arr = Array.isArray(data.results) ? data.results : [];
0,4
    if (!arr.length) {
0,4
        container.insertAdjacentHTML(
0,4
            'beforeend',
0,4
            '<div class="displaybox-container"><div class="displaybox-content">No results to display.</div></div>'
0,4
        );
0,4
        return;
0,4
    }
0,4

0,4
    // 1) Extrair metadados antes para usar score
0,4
    const items = arr.map(item => {
0,4
        const metaData = extractMetadata(item, 'ccg');
0,4
        return { ...item, _meta: metaData };
0,4
    });
0,4

0,4
    // 2) Ordenar por score decrescente
0,4
    items.sort((a, b) => {
0,4
        const sa = (typeof a._meta.score === 'number') ? a._meta.score : -Infinity;
0,4
        const sb = (typeof b._meta.score === 'number') ? b._meta.score : -Infinity;
0,4
        return sa - sb; // menor primeiro
0,4
    });
0,4

0,4
   
0,4
    // 3) Gera HTML de cada item
0,4
    const contentHtml = items.map(item => {
0,4
        // Conteúdo principal
0,4
        let content = (
0,4
            (typeof item.markdown === 'string' && item.markdown) ||
0,4
            (typeof item.page_content === 'string' && item.page_content) ||
0,4
            (typeof item.text === 'string' && item.text) ||
0,4
            ''
0,4
        );
0,4

0,4
        const rawHtml = renderMarkdown(content);
0,4
        const safeHtml = (window.DOMPurify ? DOMPurify.sanitize(rawHtml) : rawHtml);
0,4
        const metaData = item._meta;
0,4

0,4
        const titleHtml = `
0,4
        <strong>${metaData.title}</strong>  ●  ${metaData.folha}  ●  #${metaData.number}
0,4
        `;
0,4

0,4
        const scoreHtml = (typeof metaData.score === 'number' && !Number.isNaN(metaData.score))
0,4
            ? `<span class="rag-badge">Score: ${metaData.score.toFixed(2)}</span>` : '';
0,4

0,4
    });
0,4

0,4
            
0,4
    // 5) Bloco final (único grupo — EC)
0,4
    const groupHtml = `
0,4
    <div class="displaybox-group">
0,4
        <div class="displaybox-header">
0,4
            <span style="color: blue; font-size: 16px; font-weight: bold;">Conscienciograma</span>
0,4
            <span class="score-badge" style="font-size: 12px">${items.length} resultado${items.length !== 1 ? 's' : ''}</span>
0,4
        </div>
0,4
        <div class="displaybox-content">
0,4
            ${contentHtml}
0,4
        </div>
0,4
    </div>`;
0,4

0,4
    container.insertAdjacentHTML('beforeend', groupHtml);
0,4

0,4
    // Also render collapsible badge row + panel
0,4
    const _ccg_count = items.length;
0,4
    const _ccg_html = `
0,4
      <div class="summary-list">
0,4
        <button class="pill pill-row" data-target="group-ccg">
0,4
          <span class="pill-label">Conscienciograma</span>
0,4
          <span class="count">${_ccg_count}</span>
0,4
        </button>
0,4
      </div>
0,4
      <div id="group-ccg" class="collapse-panel">
0,4
        <div class="displaybox-container">
0,4
          <div class="displaybox-content group-content">
0,4
            ${contentHtml}
0,4
          </div>
0,4
        </div>
0,4
      </div>`;
0,4
    container.insertAdjacentHTML('beforeend', _ccg_html);
0,4

0,4
    if (!container.__pillHandlerBound) {
0,4
      container.addEventListener('click', function(ev) {
0,4
          const btn = ev.target.closest('.pill');
0,4
          if (!btn) return;
0,4
          ev.preventDefault();
0,4
          const targetId = btn.getAttribute('data-target');
0,4
          if (!targetId) return;
0,4
          const safeId = `#${targetId.replace(/[^a-z0-9\-_:]/gi, '')}`;
0,4
          const panel = container.querySelector(safeId) || container.querySelector(`#${targetId}`);
0,4
          if (!panel) return;
0,4
          panel.classList.toggle('open');
0,4
          if (panel.classList.contains('open')) {
0,4
              try { panel.scrollIntoView({ behavior: 'smooth', block: 'start' }); } catch(e) {}
0,4
          }
0,4
      });
0,4
      container.__pillHandlerBound = true;
0,4
    }
0,4
}
